import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useState } from 'react';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import { parseID, verifyLink, getPlaylist } from './api/spotifyapi';

const inter = Inter({ subsets: ['latin'] })
const DEFAULT_ART = 'https://developer.spotify.com/images/guidelines/design/icon2@2x.png'

// This page handles the callback from Spotify's auth
// Users will select a playlist to rank

export default function Home() {
    const [currentAlbum, setCurrentAlbum] = useState(undefined);

    /**
     * Check if a link or ID is a valid Spotify playlist. If it is,
     * set it as the current album.
     * @param {string} e the proposed link/ID 
     */
    async function handleChangeLinks(e) {
      // If the link is valid, set it as the current album
      // and save the ID in local storage
      if (await verifyLink(e.target.value)) {
        getPlaylist(e.target.value).then(res => setCurrentAlbum(res));
        localStorage.setItem('album', parseID(e.target.value));
      } else {
        setCurrentAlbum(undefined);
      }
    }

    // React component to manage redirection to the game
    function Redirect({text, page, disabled}) {
      return (
        <Link href={page} className={styles.input}>
          <button className={styles.button} disabled={disabled}> {text} </button>
        </Link>
      )
    }

    /**
     * Return whether a string looks like a URL or a Spotify ID.
     * This helps cut down on unnecessary fetch calls.
     * @param {string} e the link to test 
     * @returns true if the link looks like a URL or a Spotify ID
     */
    function looksLikeLink(e) {
      const SPOTIFY_ID_LENGTH = 22;
      const REGEX = new RegExp("((http|https)://)(www.)?" 
      + "[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]" 
      + "{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)");
      
      let link = e.target.value;
      return link.length == SPOTIFY_ID_LENGTH || REGEX.test(link);
      
    }

    return (
        <>
          <Head>
              <title>Spotify API Project</title>
              <meta name="description" content="Generated by create next app" />
              <meta name="viewport" content="width=device-width, initial-scale=1" />
          </Head>

          <main className={`${styles.main} ${inter.className}`}>
            
              {/* Heading and input box, make sure input exists before checking link */}
              <section className={styles.card}>
              <span className={styles.description}>
                  Enter spotify playlist ID or link to get started:
              </span>
              <input 
                  type='text'
                  className={styles.input}
                  onChange={(e) => looksLikeLink(e) ? handleChangeLinks(e) : null} 
              />

              {/* The tracklist cover and title */}
              <Image 
                  className={styles.logo}
                  src={currentAlbum && currentAlbum.hasOwnProperty('images') ? currentAlbum.images[0].url: DEFAULT_ART}
                  width={250}
                  height={250}
              />
              <span className={styles.description}>Current album: {currentAlbum ? currentAlbum.name : 'No tracklist found'}</span>

              {/* Redirect buttons to play the game */}
              <Redirect disabled={currentAlbum ? false : true} text='Rank random' page='/play_random' />
              <Redirect disabled={currentAlbum ? false : true} text='Rank comprehensive' page='/play_comprehensive' />
              
              </section>
          </main>
        </>
  )
}
