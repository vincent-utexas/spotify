import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { useState } from 'react';
import styles from '@/styles/Home.module.css';
import { verifyLink, getPlaylist } from './api/spotifyapi';
import { parseID } from './api/tools';
import classNames from 'classnames';

// This page handles the callback from Spotify's auth
// Users will select a playlist to rank

export default function Home() {
    const [currentAlbum, setCurrentAlbum] = useState(undefined);

    /**
     * Check if a link or ID is a valid Spotify playlist. If it is,
     * set it as the current album.
     * @param {string} e the proposed link/ID 
     */
    async function handleChangeLinks(e) {
      // If the link is valid, set it as the current album
      // and save the ID in local storage
      if (await verifyLink(e.target.value)) {
        getPlaylist(e.target.value).then(res => setCurrentAlbum(res));
        localStorage.setItem('album', parseID(e.target.value));
      } else {
        setCurrentAlbum(undefined);
        localStorage.setItem('album', "");
      }
    }

    // React component to manage redirection to the game
    function Redirect({text, page, disabled}) {
      return (
        <Link href={page} className={styles.input}>
          <button className={styles.button} disabled={disabled}> {text} </button>
        </Link>
      )
    }

    // React component to display tracklist information
    // or visually cue user that the a tracklist does not exist
    function TracklistDescription() {
      const classes = classNames({
        [styles.description]: true,
        [styles.text_shake]: !currentAlbum,
      });

      return (
        <>
          <span className={classes}>Current tracklist: {currentAlbum ? currentAlbum.name : "none"} </span>
        </>
      )
    }

    /**
     * Return whether a string looks like a URL or a Spotify ID.
     * This helps cut down on unnecessary fetch calls.
     * @param {string} e the link to test 
     * @returns true if the link looks like a URL or a Spotify ID
     */
    function looksLikeLink(e) {
      const SPOTIFY_ID_LENGTH = 22;
      const REGEX = new RegExp("((http|https)://)(www.)?" 
      + "[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]" 
      + "{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)");
      
      let link = e.target.value;
      return link.length == SPOTIFY_ID_LENGTH || REGEX.test(link);
      
    }

    return (
        <>
          <Head>
              <title>Spotify API Project</title>
              <meta name="description" content="Generated by create next app" />
              <meta name="viewport" content="width=device-width, initial-scale=1" />
          </Head>

          <main className={`${styles.main} ${inter.className}`}>
            
              {/* Heading and input box, make sure input exists before checking link */}
              <section className={styles.card}>
              <span className={styles.description}>
                  Enter spotify playlist ID or link to get started:
              </span>
              <input 
                  type='text'
                  className={styles.input}
                  onChange={(e) => {if (looksLikeLink(e)) handleChangeLinks(e)}} 
              />

              {/* The tracklist cover and title */}
              {currentAlbum && 
                <Image 
                  className={styles.logo}
                  src={currentAlbum.images[0].url}
                  alt=""
                  width={250}
                  height={250}
                />
              }

              {!currentAlbum &&
                <img
                  className={styles.logo}
                  width={250}
                  height={250}
                />
              }

              {/* Text for current tracklist */}
              <TracklistDescription />


              {/* Redirect buttons to play the game */}
              <Redirect disabled={currentAlbum ? false : true} text='Rank random' page='/play_random' />
              <Redirect disabled={currentAlbum ? false : true} text='Rank comprehensive' page='/play_comprehensive' />
              
              </section>
          </main>
        </>
  )
}
